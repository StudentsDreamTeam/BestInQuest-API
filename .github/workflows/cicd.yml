name: API CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/api
  MAVEN_OPTS: -Djava.security.egd=file:/dev/./urandom

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: SonarCloud Scan
        if: success()
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.organization=studentsdreamteam
            -Dsonar.projectKey=StudentsDreamTeam_BestInQuest-API
            -Dsonar.java.source=21
            -Dsonar.sources=src/main/java
            -Dsonar.java.binaries=target/classes
            -Dsonar.exclusions=**/generated/**,**/model/**
            ${{ github.ref_name != 'main' && '-Dsonar.branch.name=' || '' }}${{ github.ref_name }}

      # -Dsonar.tests=src/test/java

  build-and-push:
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn -B package --file pom.xml
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container  # Используем контейнерный драйвер

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Login to Docker Hub
        if: success() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push to Docker Hub
        if: success() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            ${{ env.DOCKER_IMAGE }}:${{ github.ref_name == 'main' && 'stable' || 'staging' }}
          push: true

        
  deploy:
    needs: build-and-push
    runs-on: self-hosted   
    env:
      DEPLOY_DIR: /opt/app  
    steps:
      - uses: actions/checkout@v4

      - name: Prepare deployment files
        run: |
          cp ./src/main/resources/BestInQuestDB.sql $DEPLOY_DIR/
          cp docker-compose.yml $DEPLOY_DIR/
          rm -f $DEPLOY_DIR/.env || true
          # Создаем .env файл из secrets (если не используется готовый)
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $DEPLOY_DIR/.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $DEPLOY_DIR/.env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $DEPLOY_DIR/.env
          echo "DOCKER_REGISTRY=${{ secrets.DOCKER_HUB_USERNAME }}" >> $DEPLOY_DIR/.env
      
      - name: Deploy application
        run: |
          cd $DEPLOY_DIR
          # Останавливаем старые контейнеры (если есть)
          docker compose down --rmi all -v || true

          if docker network inspect app_network >/dev/null 2>&1; then
          docker network rm app_network || true
          fi

          docker network create app_network || true
          
          # Запускаем новые контейнеры
          docker compose up -d
          
          # Проверяем статус
          docker compose ps
